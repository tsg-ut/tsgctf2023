from sage.modules.free_module_integer import IntegerLattice
from output import public_key

p = 0xfffffffffffffffffffffffffffffffeffffffffffffffff
F = GF(p)
d = 100
n = 10
q = p // (2 ** 64)

A, T = public_key

B = []
for i in range(d):
  r = [0 for _ in range(d)]
  r[i] = p
  B.append(r)

print('LLL start')
lattice = IntegerLattice([*matrix(A).transpose().rows(), *B], lll_reduce=True)
print('LLL end')
E = lattice.reduced_basis
print(lattice)
print(E)

# Babai's Nearest Plane algorithm
# from: http://mslc.ctf.su/wp/plaidctf-2016-sexec-crypto-300/
def Babai_closest_vector(M, G, target):
  small = target
  for _ in range(1):
    for i in reversed(range(M.nrows())):
      c = ((small * G[i]) / (G[i] * G[i])).round()
      small -= M[i] * c
  return target - small

gram = E.gram_schmidt()[0]
res = Babai_closest_vector(E, gram, vector(ZZ, T))

print(res)

recovered_e = res - vector(ZZ, T)

print(recovered_e)