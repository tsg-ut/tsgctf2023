P = 0xfffffffffffffffffffffffffffffffeffffffffffffffff
F = GF(P)

from sage.stats.distributions.discrete_gaussian_integer import DiscreteGaussianDistributionIntegerSampler
D = DiscreteGaussianDistributionIntegerSampler(300.0)

from sage.crypto.lwe import LWE, Regev, samples

lwe = LWE(n=20, q=P, D=D)
s = lwe._LWE__s
data = samples(m=20, n=20, lwe=lwe)

enc = matrix(F, [a for (a, s) in data])
target = vector(F, [s for (a, s) in data])

print(enc * s)
print(target)


from sage.misc.prandom import randrange

def encrypt(plain_text, secret_key):
  errors = []
  encrypted_text = []

  for n in secret_key:
    temp_encrypted_row = vector(F, [F(randrange(2 ** 16)) for _ in range(20)])
    product = secret_key.dot_product(temp_encrypted_row)
    error = randrange(-2 ** 64, 2 ** 64)
    target = plain_text * n + error
    encrypted_row = list(map(lambda m: m / product * target, temp_encrypted_row))
    errors.append(error)
    encrypted_text.append(encrypted_row)

  encrypted_text = matrix(F, encrypted_text)
  errors = vector(F, errors)

  assert(encrypted_text * secret_key == plain_text * secret_key + errors)

  return encrypted_text

def decrypt(encrypted_text, secret_key):
  plain_text = floor(vector(QQ, encrypted_text[0]).dot_product(vector(QQ, secret_key)) / QQ(secret_key[0]))

  return plain_text % P

secret_key = vector(F, [F.random_element() for _ in range(20)])
plain_text = F(int.from_bytes(b'TSGCTF{SECRET_GOES_HERE}', 'big'))

encrypted_text = encrypt(plain_text, secret_key)

# print(encrypted_text)

print(decrypt(encrypted_text, secret_key))
print(plain_text)