from sage.misc.prandom import randrange
import json

N = 2 ** 1024

def encrypt(plain_text, secret_key):
  errors = []
  encrypted_text = []

  for n in secret_key:
    temp_encrypted_row = vector(ZZ, [randrange(N) for _ in range(20)])
    product = secret_key.dot_product(temp_encrypted_row)
    error = randrange(-N, N)
    target = (plain_text << 8) * n + error
    encrypted_row = list(map(lambda m: m * target // product, temp_encrypted_row))

    errors.append(error)
    encrypted_text.append(encrypted_row)

  encrypted_text = matrix(ZZ, encrypted_text)
  errors = vector(ZZ, errors)

  return encrypted_text

def decrypt(encrypted_text, secret_key):
  e = 0
  d = 0
  for enc, key in zip(encrypted_text, secret_key):
    e += vector(ZZ, enc).dot_product(secret_key)
    d += key

  return round(QQ(e // d) >> 8)

secret_key = vector(ZZ, [randrange(N) for _ in range(20)])
plain_text = ZZ(int.from_bytes(b'TSGCTF{SECRET_GOES_HERE}', 'big'))

encrypted_text = encrypt(plain_text, secret_key)

assert(decrypt(encrypted_text, secret_key) == plain_text)

with open('output.json', 'w') as f:
  json.dump(list(map(lambda r: list(map(int, r)), encrypted_text)), f)